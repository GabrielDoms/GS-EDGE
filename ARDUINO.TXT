#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <WiFi.h>
#include <PubSubClient.h>

const char *ssid = "Wokwi-GUEST";
const char *password = "";
const char *mqtt_server = "mqtt-dashboard.com";
const int mqtt_port = 1883;
const char *mqtt_user = "Cliente";
const char *mqtt_password = "Cliente1234";
const char *mqtt_topic_publish = "fiap/iot/GS15"; 
const char *mqtt_topic_subscribe = "fiap/iot/GS15"; 

const int buttonPin = 2;
const int ledGreen = 14;
const int ledRed = 12;
const int ledYellow = 13;

LiquidCrystal_I2C lcd(0x27, 16, 2);
WiFiClient espClient;
PubSubClient client(espClient);

void setup() {
  Serial.begin(115200);
  Serial.println("Iniciando...");

  pinMode(buttonPin, INPUT);
  pinMode(ledGreen, OUTPUT);
  pinMode(ledRed, OUTPUT);
  pinMode(ledYellow, OUTPUT);

  Wire.begin();
  lcd.begin(16, 2);
  lcd.print("Bem-vindo!");
  delay(2000);
  lcd.clear();

  conectarWiFi();
  configurarMQTT();
}

void loop() {
  if (!client.connected()) {
    reconectarMQTT();
  }

  client.loop();

  lcd.print("Pressione botao.");

  while (digitalRead(buttonPin) == LOW) {
    delay(100);
  }

  lcd.clear();
  lcd.print("Quantas doses?");
  delay(2000);
  lcd.clear();

  int dose = 0;  // Quantidade de doses que você utiliza por mês

  if (dose >= 15) {
    exibirFeedback("Risco elevado!", "Faça exames.");
    acenderLED(ledRed);
    
    delay(5000);
    enviarMQTT("Risco elevado");
  } else if (dose == 0) {
    exibirFeedback("Saude otima!", "Mantenha assim.");
    acenderLED(ledGreen);
  
    delay(5000);
    enviarMQTT("Saude otima");
  } else {
    exibirFeedback("Uso moderado.", "Mas monitore.");
    acenderLED(ledYellow);

    delay(5000);
    enviarMQTT("Uso moderado");
  }

  char mensagem[50];
  snprintf(mensagem, sizeof(mensagem), "Saude otima (%d doses)", dose);

  Serial.println("Publicando mensagem...");
  char topico[50];
  snprintf(topico, sizeof(topico), mqtt_topic_publish);

  if (client.publish(topico, mensagem) == 1) {
    Serial.println("Mensagem de saúde publicada com sucesso!");
  } else {
    Serial.println("Erro ao publicar mensagem de saúde");
  }

  while (digitalRead(buttonPin) == HIGH) {
    delay(50);
  }

  apagarLEDs();
  lcd.clear();
}

void exibirFeedback(String linha1, String linha2) {
  lcd.setCursor(0, 0);
  lcd.print(linha1);

  lcd.setCursor(0, 1);
  lcd.print(linha2);
}

void acenderLED(int pin) {
  digitalWrite(pin, HIGH);
}

void apagarLEDs() {
  digitalWrite(ledGreen, LOW);
  digitalWrite(ledRed, LOW);
  digitalWrite(ledYellow, LOW);
}

void enviarMQTT(String mensagem) {
  char topico[50];
  snprintf(topico, sizeof(topico), mqtt_topic_publish);
  client.publish(topico, mensagem.c_str());
}

void conectarWiFi() {
  Serial.println("Conectando ao WiFi...");
  WiFi.begin(ssid, password);

  int tentativas = 0;
  while (WiFi.status() != WL_CONNECTED && tentativas < 30) {
    delay(1000);
    Serial.println("Ainda tentando conectar ao WiFi...");
    tentativas++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("Conectado ao WiFi");
  } else {
    Serial.println("Falha ao conectar ao WiFi. Continuando sem conexão.");
  }
}

void configurarMQTT() {
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
  reconectarMQTT();
}

void reconectarMQTT() {
  while (!client.connected()) {
    Serial.println("Conectando ao MQTT...");
    if (client.connect("ESP32Client", mqtt_user, mqtt_password)) {
      Serial.println("Conectado ao MQTT");
      client.subscribe(mqtt_topic_subscribe);
    } else {
      Serial.print("Falha na conexão, rc=");
      Serial.print(client.state());
      Serial.println(" Tentando novamente em 5 segundos...");
      delay(5000);
    }
  }
}

void callback(char *topico, byte *payload, unsigned int comprimento) {
  Serial.print("Mensagem recebida [");
  Serial.print(topico);
  Serial.print("] ");
  for (int i = 0; i < comprimento; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}